import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["monitorState", "children", "fluid"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { cloneElement, Children, Component } from 'react';
import PropTypes from 'prop-types';
import { Dock } from 'react-dock';
import { POSITIONS } from './constants';
import { toggleVisibility, changeMonitor, changePosition, changeSize } from './actions';
import reducer from './reducers';
import parseKey from 'parse-key';

var DockMonitor = /*#__PURE__*/function (_Component) {
  _inherits(DockMonitor, _Component);

  var _super = _createSuper(DockMonitor);

  function DockMonitor(props) {
    var _this;

    _classCallCheck(this, DockMonitor);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (e) {
      // Ignore regular keys when focused on a field
      // and no modifiers are active.
      if (!e.ctrlKey && !e.metaKey && !e.altKey && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable)) {
        return;
      }

      var visibilityKey = parseKey(_this.props.toggleVisibilityKey);
      var positionKey = parseKey(_this.props.changePositionKey);
      var monitorKey;

      if (_this.props.changeMonitorKey) {
        monitorKey = parseKey(_this.props.changeMonitorKey);
      }

      if (_this.matchesKey(visibilityKey, e)) {
        e.preventDefault();

        _this.props.dispatch(toggleVisibility());
      } else if (_this.matchesKey(positionKey, e)) {
        e.preventDefault();

        _this.props.dispatch(changePosition());
      } else if (_this.matchesKey(monitorKey, e)) {
        e.preventDefault();

        _this.props.dispatch(changeMonitor());
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSizeChange", function (requestedSize) {
      _this.props.dispatch(changeSize(requestedSize));
    });

    var childrenCount = Children.count(props.children);

    if (childrenCount === 0) {
      // eslint-disable-next-line no-console
      console.error('<DockMonitor> requires at least one monitor inside. ' + 'Why donâ€™t you try <LogMonitor>? You can get it at ' + 'https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-log-monitor.');
    } else if (childrenCount > 1 && !props.changeMonitorKey) {
      // eslint-disable-next-line no-console
      console.error('You specified multiple monitors inside <DockMonitor> ' + 'but did not provide `changeMonitorKey` prop to change them. ' + 'Try specifying <DockMonitor changeMonitorKey="ctrl-m" /> ' + 'and then press Ctrl-M.');
    }

    return _this;
  }

  _createClass(DockMonitor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "matchesKey",
    value: function matchesKey(key, event) {
      if (!key) {
        return false;
      }

      var charCode = event.keyCode || event.which;
      var char = String.fromCharCode(charCode);
      return key.name.toUpperCase() === char.toUpperCase() && key.alt === event.altKey && key.ctrl === event.ctrlKey && key.meta === event.metaKey && key.shift === event.shiftKey;
    }
  }, {
    key: "renderChild",
    value: function renderChild(child, index, otherProps) {
      var monitorState = this.props.monitorState;
      var childMonitorIndex = monitorState.childMonitorIndex,
          childMonitorStates = monitorState.childMonitorStates;

      if (index !== childMonitorIndex) {
        return null;
      }

      return /*#__PURE__*/cloneElement(child, _objectSpread({
        monitorState: childMonitorStates[index]
      }, otherProps));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          monitorState = _this$props.monitorState,
          children = _this$props.children,
          fluid = _this$props.fluid,
          rest = _objectWithoutProperties(_this$props, _excluded);

      var position = monitorState.position,
          isVisible = monitorState.isVisible,
          size = monitorState.size;
      return /*#__PURE__*/React.createElement(Dock, {
        position: position,
        isVisible: isVisible,
        size: size,
        fluid: fluid,
        onSizeChange: this.handleSizeChange,
        dimMode: "none"
      }, Children.map(children, function (child, index) {
        return _this2.renderChild(child, index, rest);
      }));
    }
  }]);

  return DockMonitor;
}(Component);

_defineProperty(DockMonitor, "update", reducer);

_defineProperty(DockMonitor, "propTypes", {
  defaultPosition: PropTypes.oneOf(POSITIONS),
  defaultIsVisible: PropTypes.bool.isRequired,
  defaultSize: PropTypes.number.isRequired,
  toggleVisibilityKey: PropTypes.string.isRequired,
  changePositionKey: PropTypes.string.isRequired,
  changeMonitorKey: PropTypes.string,
  fluid: PropTypes.bool,
  dispatch: PropTypes.func,
  monitorState: PropTypes.shape({
    position: PropTypes.oneOf(POSITIONS).isRequired,
    size: PropTypes.number.isRequired,
    isVisible: PropTypes.bool.isRequired,
    childMonitorState: PropTypes.any
  })
});

_defineProperty(DockMonitor, "defaultProps", {
  defaultIsVisible: true,
  defaultPosition: 'right',
  defaultSize: 0.3,
  fluid: true
});

export default DockMonitor;