"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDock = require("react-dock");

var _constants = require("./constants");

var _actions = require("./actions");

var _reducers = _interopRequireDefault(require("./reducers"));

var _parseKey = _interopRequireDefault(require("parse-key"));

var _excluded = ["monitorState", "children", "fluid"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var DockMonitor = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(DockMonitor, _Component);

  var _super = _createSuper(DockMonitor);

  function DockMonitor(props) {
    var _this;

    (0, _classCallCheck2.default)(this, DockMonitor);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (e) {
      // Ignore regular keys when focused on a field
      // and no modifiers are active.
      if (!e.ctrlKey && !e.metaKey && !e.altKey && (e.target.tagName === 'INPUT' || e.target.tagName === 'SELECT' || e.target.tagName === 'TEXTAREA' || e.target.isContentEditable)) {
        return;
      }

      var visibilityKey = (0, _parseKey.default)(_this.props.toggleVisibilityKey);
      var positionKey = (0, _parseKey.default)(_this.props.changePositionKey);
      var monitorKey;

      if (_this.props.changeMonitorKey) {
        monitorKey = (0, _parseKey.default)(_this.props.changeMonitorKey);
      }

      if (_this.matchesKey(visibilityKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.toggleVisibility)());
      } else if (_this.matchesKey(positionKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.changePosition)());
      } else if (_this.matchesKey(monitorKey, e)) {
        e.preventDefault();

        _this.props.dispatch((0, _actions.changeMonitor)());
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleSizeChange", function (requestedSize) {
      _this.props.dispatch((0, _actions.changeSize)(requestedSize));
    });

    var childrenCount = _react.Children.count(props.children);

    if (childrenCount === 0) {
      // eslint-disable-next-line no-console
      console.error('<DockMonitor> requires at least one monitor inside. ' + 'Why donâ€™t you try <LogMonitor>? You can get it at ' + 'https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-log-monitor.');
    } else if (childrenCount > 1 && !props.changeMonitorKey) {
      // eslint-disable-next-line no-console
      console.error('You specified multiple monitors inside <DockMonitor> ' + 'but did not provide `changeMonitorKey` prop to change them. ' + 'Try specifying <DockMonitor changeMonitorKey="ctrl-m" /> ' + 'and then press Ctrl-M.');
    }

    return _this;
  }

  (0, _createClass2.default)(DockMonitor, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('keydown', this.handleKeyDown);
    }
  }, {
    key: "matchesKey",
    value: function matchesKey(key, event) {
      if (!key) {
        return false;
      }

      var charCode = event.keyCode || event.which;
      var char = String.fromCharCode(charCode);
      return key.name.toUpperCase() === char.toUpperCase() && key.alt === event.altKey && key.ctrl === event.ctrlKey && key.meta === event.metaKey && key.shift === event.shiftKey;
    }
  }, {
    key: "renderChild",
    value: function renderChild(child, index, otherProps) {
      var monitorState = this.props.monitorState;
      var childMonitorIndex = monitorState.childMonitorIndex,
          childMonitorStates = monitorState.childMonitorStates;

      if (index !== childMonitorIndex) {
        return null;
      }

      return /*#__PURE__*/(0, _react.cloneElement)(child, _objectSpread({
        monitorState: childMonitorStates[index]
      }, otherProps));
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          monitorState = _this$props.monitorState,
          children = _this$props.children,
          fluid = _this$props.fluid,
          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var position = monitorState.position,
          isVisible = monitorState.isVisible,
          size = monitorState.size;
      return /*#__PURE__*/_react.default.createElement(_reactDock.Dock, {
        position: position,
        isVisible: isVisible,
        size: size,
        fluid: fluid,
        onSizeChange: this.handleSizeChange,
        dimMode: "none"
      }, _react.Children.map(children, function (child, index) {
        return _this2.renderChild(child, index, rest);
      }));
    }
  }]);
  return DockMonitor;
}(_react.Component);

(0, _defineProperty2.default)(DockMonitor, "update", _reducers.default);
(0, _defineProperty2.default)(DockMonitor, "propTypes", {
  defaultPosition: _propTypes.default.oneOf(_constants.POSITIONS),
  defaultIsVisible: _propTypes.default.bool.isRequired,
  defaultSize: _propTypes.default.number.isRequired,
  toggleVisibilityKey: _propTypes.default.string.isRequired,
  changePositionKey: _propTypes.default.string.isRequired,
  changeMonitorKey: _propTypes.default.string,
  fluid: _propTypes.default.bool,
  dispatch: _propTypes.default.func,
  monitorState: _propTypes.default.shape({
    position: _propTypes.default.oneOf(_constants.POSITIONS).isRequired,
    size: _propTypes.default.number.isRequired,
    isVisible: _propTypes.default.bool.isRequired,
    childMonitorState: _propTypes.default.any
  })
});
(0, _defineProperty2.default)(DockMonitor, "defaultProps", {
  defaultIsVisible: true,
  defaultPosition: 'right',
  defaultSize: 0.3,
  fluid: true
});
var _default = DockMonitor;
exports.default = _default;