"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var themes = _interopRequireWildcard(require("redux-devtools-themes"));
var _core = require("@redux-devtools/core");
var _lodash = _interopRequireDefault(require("lodash.debounce"));
var _actions = require("./actions");
var _reducers = _interopRequireDefault(require("./reducers"));
var _LogMonitorButtonBar = _interopRequireDefault(require("./LogMonitorButtonBar"));
var _LogMonitorEntryList = _interopRequireDefault(require("./LogMonitorEntryList"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// eslint-disable-next-line @typescript-eslint/unbound-method
const {
  toggleAction,
  setActionsActive
} = _core.ActionCreators;
const styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};
class LogMonitor extends _react.PureComponent {
  constructor() {
    super(...arguments);
    (0, _defineProperty2.default)(this, "updateScrollTop", (0, _lodash.default)(() => {
      const node = this.node;
      this.props.dispatch((0, _actions.updateScrollTop)(node ? node.scrollTop : 0));
    }, 500));
    (0, _defineProperty2.default)(this, "handleToggleAction", id => {
      this.props.dispatch(toggleAction(id));
    });
    (0, _defineProperty2.default)(this, "handleToggleConsecutiveAction", id => {
      const {
        monitorState,
        actionsById
      } = this.props;
      const {
        consecutiveToggleStartId
      } = monitorState;
      if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
        const {
          skippedActionIds
        } = this.props;
        const start = Math.min(consecutiveToggleStartId, id);
        const end = Math.max(consecutiveToggleStartId, id);
        const active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;
        this.props.dispatch(setActionsActive(start, end + 1, active));
        this.props.dispatch((0, _actions.startConsecutiveToggle)(null));
      } else if (id > 0) {
        this.props.dispatch((0, _actions.startConsecutiveToggle)(id));
      }
    });
    (0, _defineProperty2.default)(this, "getRef", node => {
      this.node = node;
    });
  }
  scroll() {
    const node = this.node;
    if (!node) {
      return;
    }
    if (this.scrollDown) {
      const {
        offsetHeight,
        scrollHeight
      } = node;
      node.scrollTop = scrollHeight - offsetHeight;
      this.scrollDown = false;
    }
  }
  componentDidMount() {
    const node = this.node;
    if (!node || !this.props.monitorState) {
      return;
    }
    if (this.props.preserveScrollTop) {
      node.scrollTop = this.props.monitorState.initialScrollTop;
      node.addEventListener('scroll', this.updateScrollTop);
    } else {
      this.scrollDown = true;
      this.scroll();
    }
  }
  componentWillUnmount() {
    const node = this.node;
    if (node && this.props.preserveScrollTop) {
      node.removeEventListener('scroll', this.updateScrollTop);
    }
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    const node = this.node;
    if (!node) {
      this.scrollDown = true;
    } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
      const {
        scrollTop,
        offsetHeight,
        scrollHeight
      } = node;
      this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
    } else {
      this.scrollDown = false;
    }
  }
  componentDidUpdate() {
    this.scroll();
  }
  getTheme() {
    const {
      theme
    } = this.props;
    if (typeof theme !== 'string') {
      return theme;
    }
    if (typeof themes[theme] !== 'undefined') {
      return themes[theme];
    }

    // eslint-disable-next-line no-console
    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
    return themes.nicinabox;
  }
  render() {
    const theme = this.getTheme();
    const {
      consecutiveToggleStartId
    } = this.props.monitorState;
    const {
      dispatch,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff
    } = this.props;
    const entryListProps = {
      theme,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      consecutiveToggleStartId,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff,
      onActionClick: this.handleToggleAction,
      onActionShiftClick: this.handleToggleConsecutiveAction
    };
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        ...styles.container,
        backgroundColor: theme.base00
      }
    }, !this.props.hideMainButtons && /*#__PURE__*/_react.default.createElement(_LogMonitorButtonBar.default, {
      theme: theme,
      dispatch: dispatch,
      hasStates: computedStates.length > 1,
      hasSkippedActions: skippedActionIds.length > 0
    }), /*#__PURE__*/_react.default.createElement("div", {
      style: this.props.hideMainButtons ? styles.elements : {
        ...styles.elements,
        top: 30
      },
      ref: this.getRef
    }, /*#__PURE__*/_react.default.createElement(_LogMonitorEntryList.default, entryListProps)));
  }
}
(0, _defineProperty2.default)(LogMonitor, "update", _reducers.default);
(0, _defineProperty2.default)(LogMonitor, "propTypes", {
  dispatch: _propTypes.default.func,
  computedStates: _propTypes.default.array,
  actionsById: _propTypes.default.object,
  stagedActionIds: _propTypes.default.array,
  skippedActionIds: _propTypes.default.array,
  monitorState: _propTypes.default.shape({
    initialScrollTop: _propTypes.default.number,
    consecutiveToggleStartId: _propTypes.default.number
  }),
  preserveScrollTop: _propTypes.default.bool,
  select: _propTypes.default.func,
  theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string]),
  expandActionRoot: _propTypes.default.bool,
  expandStateRoot: _propTypes.default.bool,
  markStateDiff: _propTypes.default.bool,
  hideMainButtons: _propTypes.default.bool
});
(0, _defineProperty2.default)(LogMonitor, "defaultProps", {
  select: state => state,
  theme: 'nicinabox',
  preserveScrollTop: true,
  expandActionRoot: true,
  expandStateRoot: true,
  markStateDiff: false
});
var _default = LogMonitor;
exports.default = _default;