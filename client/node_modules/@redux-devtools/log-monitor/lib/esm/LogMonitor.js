import _defineProperty from "@babel/runtime/helpers/defineProperty";
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import * as themes from 'redux-devtools-themes';
import { ActionCreators } from '@redux-devtools/core';
import debounce from 'lodash.debounce';
import { updateScrollTop, startConsecutiveToggle } from './actions';
import reducer from './reducers';
import LogMonitorButtonBar from './LogMonitorButtonBar';
import LogMonitorEntryList from './LogMonitorEntryList';

// eslint-disable-next-line @typescript-eslint/unbound-method
const {
  toggleAction,
  setActionsActive
} = ActionCreators;
const styles = {
  container: {
    fontFamily: 'monaco, Consolas, Lucida Console, monospace',
    position: 'relative',
    overflowY: 'hidden',
    width: '100%',
    height: '100%',
    minWidth: 300,
    direction: 'ltr'
  },
  elements: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    overflowX: 'hidden',
    overflowY: 'auto'
  }
};
class LogMonitor extends PureComponent {
  constructor() {
    super(...arguments);
    _defineProperty(this, "updateScrollTop", debounce(() => {
      const node = this.node;
      this.props.dispatch(updateScrollTop(node ? node.scrollTop : 0));
    }, 500));
    _defineProperty(this, "handleToggleAction", id => {
      this.props.dispatch(toggleAction(id));
    });
    _defineProperty(this, "handleToggleConsecutiveAction", id => {
      const {
        monitorState,
        actionsById
      } = this.props;
      const {
        consecutiveToggleStartId
      } = monitorState;
      if (consecutiveToggleStartId && actionsById[consecutiveToggleStartId]) {
        const {
          skippedActionIds
        } = this.props;
        const start = Math.min(consecutiveToggleStartId, id);
        const end = Math.max(consecutiveToggleStartId, id);
        const active = skippedActionIds.indexOf(consecutiveToggleStartId) > -1;
        this.props.dispatch(setActionsActive(start, end + 1, active));
        this.props.dispatch(startConsecutiveToggle(null));
      } else if (id > 0) {
        this.props.dispatch(startConsecutiveToggle(id));
      }
    });
    _defineProperty(this, "getRef", node => {
      this.node = node;
    });
  }
  scroll() {
    const node = this.node;
    if (!node) {
      return;
    }
    if (this.scrollDown) {
      const {
        offsetHeight,
        scrollHeight
      } = node;
      node.scrollTop = scrollHeight - offsetHeight;
      this.scrollDown = false;
    }
  }
  componentDidMount() {
    const node = this.node;
    if (!node || !this.props.monitorState) {
      return;
    }
    if (this.props.preserveScrollTop) {
      node.scrollTop = this.props.monitorState.initialScrollTop;
      node.addEventListener('scroll', this.updateScrollTop);
    } else {
      this.scrollDown = true;
      this.scroll();
    }
  }
  componentWillUnmount() {
    const node = this.node;
    if (node && this.props.preserveScrollTop) {
      node.removeEventListener('scroll', this.updateScrollTop);
    }
  }
  UNSAFE_componentWillReceiveProps(nextProps) {
    const node = this.node;
    if (!node) {
      this.scrollDown = true;
    } else if (this.props.stagedActionIds.length < nextProps.stagedActionIds.length) {
      const {
        scrollTop,
        offsetHeight,
        scrollHeight
      } = node;
      this.scrollDown = Math.abs(scrollHeight - (scrollTop + offsetHeight)) < 20;
    } else {
      this.scrollDown = false;
    }
  }
  componentDidUpdate() {
    this.scroll();
  }
  getTheme() {
    const {
      theme
    } = this.props;
    if (typeof theme !== 'string') {
      return theme;
    }
    if (typeof themes[theme] !== 'undefined') {
      return themes[theme];
    }

    // eslint-disable-next-line no-console
    console.warn('DevTools theme ' + theme + ' not found, defaulting to nicinabox');
    return themes.nicinabox;
  }
  render() {
    const theme = this.getTheme();
    const {
      consecutiveToggleStartId
    } = this.props.monitorState;
    const {
      dispatch,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff
    } = this.props;
    const entryListProps = {
      theme,
      actionsById,
      skippedActionIds,
      stagedActionIds,
      computedStates,
      currentStateIndex,
      consecutiveToggleStartId,
      select,
      expandActionRoot,
      expandStateRoot,
      markStateDiff,
      onActionClick: this.handleToggleAction,
      onActionShiftClick: this.handleToggleConsecutiveAction
    };
    return /*#__PURE__*/React.createElement("div", {
      style: {
        ...styles.container,
        backgroundColor: theme.base00
      }
    }, !this.props.hideMainButtons && /*#__PURE__*/React.createElement(LogMonitorButtonBar, {
      theme: theme,
      dispatch: dispatch,
      hasStates: computedStates.length > 1,
      hasSkippedActions: skippedActionIds.length > 0
    }), /*#__PURE__*/React.createElement("div", {
      style: this.props.hideMainButtons ? styles.elements : {
        ...styles.elements,
        top: 30
      },
      ref: this.getRef
    }, /*#__PURE__*/React.createElement(LogMonitorEntryList, entryListProps)));
  }
}
_defineProperty(LogMonitor, "update", reducer);
_defineProperty(LogMonitor, "propTypes", {
  dispatch: PropTypes.func,
  computedStates: PropTypes.array,
  actionsById: PropTypes.object,
  stagedActionIds: PropTypes.array,
  skippedActionIds: PropTypes.array,
  monitorState: PropTypes.shape({
    initialScrollTop: PropTypes.number,
    consecutiveToggleStartId: PropTypes.number
  }),
  preserveScrollTop: PropTypes.bool,
  select: PropTypes.func,
  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
  expandActionRoot: PropTypes.bool,
  expandStateRoot: PropTypes.bool,
  markStateDiff: PropTypes.bool,
  hideMainButtons: PropTypes.bool
});
_defineProperty(LogMonitor, "defaultProps", {
  select: state => state,
  theme: 'nicinabox',
  preserveScrollTop: true,
  expandActionRoot: true,
  expandStateRoot: true,
  markStateDiff: false
});
export default LogMonitor;